// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

contract VolcanoCoin {

    uint256 total_supply = 10000;
    address owner;

    struct Payment {
        address recipient_address;
        uint256 amount;
    }
    
    mapping(address => uint) public balances;
    mapping(address => Payment[]) public payments;

    event Supply_changed (uint256);
    event Transfer (address, uint256);

    constructor() {
        owner = msg.sender;
        balances[owner] = total_supply;
    }

    modifier onlyOwner {
        require(
            msg.sender == owner,
            "Only owner can call this function."
        );
        _;
    }

    function getTotalSupply() public view returns (uint256) {
        return total_supply;
    }

    function getPayments(address _sender) public view returns (Payment[] memory) {
        return payments[_sender];
    }

    function increaseTotalSupply() public onlyOwner {
        total_supply += 1000;
        balances[owner] += 1000;
        emit Supply_changed(total_supply);
    }

    function transfer(address _recipient, uint256 _amount) public {
        balances[_recipient] += _amount;
        balances[msg.sender] -= _amount;
        payments[msg.sender].push(Payment(_recipient, _amount));
        emit Transfer(_recipient, _amount);
    }

}
